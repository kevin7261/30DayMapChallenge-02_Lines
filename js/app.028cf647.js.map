{"version":3,"file":"js/app.028cf647.js","mappings":"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","sources":["webpack://30DayMapChallenge-02_Lines/./src/App.vue","webpack://30DayMapChallenge-02_Lines/./src/App.vue?7ccd","webpack://30DayMapChallenge-02_Lines/./src/views/HomeView.vue","webpack://30DayMapChallenge-02_Lines/./src/tabs/MapTab.vue","webpack://30DayMapChallenge-02_Lines/./src/stores/dataStore.js","webpack://30DayMapChallenge-02_Lines/./src/stores/defineStore.js","webpack://30DayMapChallenge-02_Lines/./src/tabs/MapTab.vue?15ab","webpack://30DayMapChallenge-02_Lines/./src/views/HomeView.vue?1da1","webpack://30DayMapChallenge-02_Lines/./src/router/index.js","webpack://30DayMapChallenge-02_Lines/./src/main.js","webpack://30DayMapChallenge-02_Lines/webpack/bootstrap","webpack://30DayMapChallenge-02_Lines/webpack/runtime/chunk loaded","webpack://30DayMapChallenge-02_Lines/webpack/runtime/compat get default export","webpack://30DayMapChallenge-02_Lines/webpack/runtime/define property getters","webpack://30DayMapChallenge-02_Lines/webpack/runtime/global","webpack://30DayMapChallenge-02_Lines/webpack/runtime/hasOwnProperty shorthand","webpack://30DayMapChallenge-02_Lines/webpack/runtime/jsonp chunk loading","webpack://30DayMapChallenge-02_Lines/webpack/startup"],"sourcesContent":["<script>\n  /**\n   * 🏠 App.vue - 應用程式根組件 (Application Root Component)\n   *\n   * ==============================================================================\n   * 📋 組件概述 (Component Overview)\n   * ==============================================================================\n   *\n   * 這是整個 Vue.js 單頁應用程式（SPA）的根組件，擔任整個應用的容器和入口點。\n   * 作為應用程式的最高層級組件，它負責：\n   *\n   * 1. 🏗️ 提供應用程式的整體框架和佈局結構\n   *     - 定義整個應用的視覺容器\n   *     - 管理應用程式的層級結構（Header、Content、Footer 等區域）\n   *     - 提供全域一致的佈局框架\n   *\n   * 2. ⏳ 管理全域載入狀態和進度顯示\n   *     - 在應用啟動期間顯示載入動畫或進度條\n   *     - 處理數據初始化過程的視覺反饋\n   *     - 管理全域的錯誤狀態顯示\n   *\n   * 3. 🚀 整合 Vue Router 的路由導航系統\n   *     - 提供 <router-view> 容器來動態渲染不同頁面\n   *     - 統一管理所有路由層級的過渡動畫\n   *     - 處理路由級別的載入狀態和權限驗證\n   *\n   * 4. 📱 實現響應式滿版佈局，無邊距和空隙\n   *     - 使用 Bootstrap 5 的 flexbox 實現全螢幕佈局\n   *     - 確保內容在不同設備上都能完整顯示\n   *     - 避免不必要的滾動條和空白區域\n   *\n   * ==============================================================================\n   * 🏛️ 架構設計 (Architecture Design)\n   * ==============================================================================\n   *\n   * 本組件採用極簡設計哲學，盡可能保持最少的功能和狀態管理，\n   * 將具體的業務邏輯委託給子組件處理。這種設計帶來以下好處：\n   *\n   * - ✅ 組件職責清晰：根組件只負責框架搭建，不涉及業務邏輯\n   * - ✅ 易於維護：代碼簡潔，減少潛在的 bug 和維護成本\n   * - ✅ 性能優化：減少不必要的響應式數據和計算屬性\n   * - ✅ 可擴展性：未來可以輕鬆添加 Header、Footer、Sidebar 等全局組件\n   *\n   * 當前架構：\n   * ┌─────────────────────────────────────┐\n   * │        App.vue (根組件)              │\n   * │  ┌───────────────────────────────┐  │\n   * │  │   <router-view />             │  │  ← 動態渲染路由頁面\n   * │  │   └─ HomeView.vue             │  │  ← 當前顯示的頁面組件\n   * │  │      └─ MapTab.vue            │  │  ← 地圖渲染組件\n   * │  └───────────────────────────────┘  │\n   * └─────────────────────────────────────┘\n   *\n   * ==============================================================================\n   * 🎨 設計理念 (Design Philosophy)\n   * ==============================================================================\n   *\n   * 1. 滿版無邊距佈局設計\n   *    - 移除所有預設的外邊距和內邊距\n   *    - 使用 viewport 單位（vh、vw）確保佔滿整個視窗\n   *    - 利用 position: fixed 實現真正的全螢幕體驗\n   *\n   * 2. 模組化組件架構\n   *    - 將功能拆分到獨立的組件中\n   *    - 組件間通過 props 和 events 進行通信\n   *    - 保持組件的可重用性和可測試性\n   *\n   * 3. 響應式優先設計\n   *    - 使用 Bootstrap 5 的響應式工具類\n   *    - 確保在各種設備上都有良好的用戶體驗\n   *    - 採用移動優先（mobile-first）的設計策略\n   *\n   * ==============================================================================\n   * 📦 組件結構說明 (Component Structure)\n   * ==============================================================================\n   *\n   * 內容層：路由視圖容器，動態顯示不同頁面組件\n   * - 使用 Vue Router 的 <router-view> 組件\n   * - 根據當前路由路徑動態渲染對應的頁面組件\n   * - 支援路由過渡動畫（可選，當前未啟用）\n   *\n   * ==============================================================================\n   * 🔧 技術實現細節 (Technical Implementation)\n   * ==============================================================================\n   *\n   * 1. Vue 3 Composition API\n   *    - 使用 setup() 函數代替 Options API\n   *    - 更好的 TypeScript 支援\n   *    - 更靈活的邏輯組織方式\n   *\n   * 2. 響應式系統\n   *    - 使用 ref() 創建響應式變數（目前為空，預留擴展空間）\n   *    - 自動追蹤依賴並更新 DOM\n   *\n   * 3. 生命週期管理\n   *    - 使用 onMounted、onUnmounted 等 Composition API 鉤子\n   *    - 管理全局資源的初始化和清理\n   *\n   * ==============================================================================\n   * 🎯 使用範例 (Usage Examples)\n   * ==============================================================================\n   *\n   * 本組件無需手動使用，由 Vue 應用程式自動掛載：\n   *\n   * ```javascript\n   * // main.js\n   * import App from './App.vue'\n   * const app = createApp(App)\n   * app.mount('#app')\n   * ```\n   *\n   * ==============================================================================\n   * 📚 相關文件 (Related Files)\n   * ==============================================================================\n   *\n   * - ./main.js - 應用程式入口文件，掛載本組件\n   * - ./router/index.js - 路由配置，定義頁面導航規則\n   * - ./views/HomeView.vue - 首頁組件，展示地圖功能\n   * - ./assets/css/common.css - 全局樣式定義\n   *\n   * ==============================================================================\n   * 🚀 未來擴展計劃 (Future Expansion Plans)\n   * ==============================================================================\n   *\n   * 1. 添加全局 Header 組件（Logo、導航菜單、用戶信息）\n   * 2. 添加全局 Footer 組件（版權信息、聯絡方式）\n   * 3. 實現全域載入狀態管理（Loading Spinner）\n   * 4. 實現全域錯誤處理（Error Boundary）\n   * 5. 添加全域通知系統（Toast Messages）\n   * 6. 支援多語言（i18n）切換\n   * 7. 實現主題切換（亮色/暗色模式）\n   *\n   * ==============================================================================\n   */\n\n  // 🔧 Vue Composition API 引入 (Vue Composition API Imports)\n  // 注意：目前組件中沒有使用任何響應式狀態，因此暫時不引入具體的 API\n  // import { ref } from 'vue'; // 移除未使用的 ref 導入\n\n  /**\n   * 📦 組件定義 (Component Definition)\n   * 使用 Vue 3 的 Options API 語法定義組件\n   * 雖然使用 Composition API，但仍需要 export default 來符合 Vue 組件規範\n   */\n  export default {\n    /**\n     * 🏷️ 組件名稱 (Component Name)\n     * 在 Vue DevTools 中顯示的名稱，便於調試和識別\n     */\n    name: 'App',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊應用程式層級使用的組件\n     * 目前為空，所有子組件都在各自的路由頁面中註冊\n     */\n    components: {},\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定應用程式層級的狀態管理\n     *\n     * 當前實現：\n     * - 返回空對象，不管理任何響應式狀態\n     * - 所有業務邏輯都委託給子組件處理\n     * - 保持根組件的簡潔性和可維護性\n     *\n     * 未來可能添加的功能：\n     * - 全局載入狀態管理\n     * - 全局錯誤處理\n     * - 全局通知系統\n     * - 用戶認證狀態\n     *\n     * @returns {Object} 返回空對象，供模板訪問的響應式狀態和方法\n     */\n    setup() {\n      // 當前實現：簡化的 App 組件，移除未使用的載入狀態\n      // 根據應用程式需求，這裡可以添加全局狀態管理\n      return {};\n    },\n  };\n</script>\n\n<template>\n  <!-- ==============================================================================\n       🏠 App.vue - 主應用程式組件 (Main Application Component)\n       ==============================================================================\n       提供應用程式整體框架，使用 Bootstrap 實現滿版無空隙佈局\n       ============================================================================== -->\n\n  <!--\n      主應用程式容器\n      - id=\"app\"：唯一標識符，Vue 應用程式的掛載點（在 index.html 中定義）\n      - class=\"d-flex flex-column\"：Bootstrap 5 的 flexbox 佈局\n                                   - d-flex：啟用 flex 容器\n                                   - flex-column：垂直排列子元素\n      - class=\"vh-100\"：Bootstrap 5 的視窗高度工具類，確保容器佔滿 100vh（整個視窗高度）\n  -->\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <!-- ========================================================================\n         📱 主要內容區域 (Main Content Area)\n         ==========================================================================\n         這個區域包含了應用的主要內容，使用 flex 佈局確保佔滿剩餘空間\n         ======================================================================== -->\n\n    <!--\n        主要內容容器\n        - class=\"d-flex flex-column\"：垂直排列子元素\n        - class=\"overflow-hidden\"：隱藏溢出內容，防止出現滾動條\n    -->\n    <div class=\"d-flex flex-column overflow-hidden\">\n      <!--\n          Vue Router 路由視圖組件\n\n          <router-view> 是 Vue Router 提供的內建組件，用於渲染當前路由匹配的組件。\n\n          工作原理：\n          1. 當用戶訪問不同的 URL 時，Vue Router 根據路由配置匹配對應的組件\n          2. <router-view> 會自動渲染該組件並替換之前的內容\n          3. 實現了單頁應用程式（SPA）的核心功能\n\n          當前路由配置（./router/index.js）：\n          - 路徑 \"/\" 對應 HomeView 組件\n          - 用戶訪問首頁時，這裡會渲染 HomeView 組件\n\n          可選特性：\n          - 路由過渡動畫：可以包裹 <transition> 組件實現頁面切換動畫\n          - 路由守衛：在路由配置中定義 beforeEach、afterEach 等守衛\n          - 動態路由：使用 :id、:slug 等參數實現動態路由\n      -->\n      <router-view />\n    </div>\n  </div>\n</template>\n\n<style>\n  /**\n * ==============================================================================\n * 🎨 應用程式全域樣式 (Application Global Styles)\n * ==============================================================================\n *\n * 引入共用 CSS 並定義應用程式層級的樣式\n * 注意：大部分樣式已移至 common.css 中統一管理\n *\n * 樣式組織策略：\n * 1. 將可重用的樣式抽取到 common.css\n * 2. 將組件特定樣式放在各自的 <style scoped> 中\n * 3. 在這裡只保留必要的全局覆蓋樣式\n * ==============================================================================\n */\n\n  /* 📦 引入共用樣式表 (Import Common Stylesheets) */\n  @import './assets/css/common.css';\n\n  /* ==============================================================================\n     📱 應用程式特定樣式 (App-Specific Styles)\n     ==============================================================================\n     在這裡定義應用程式層級的樣式覆蓋，例如：\n     - 全局字體設定\n     - 全局顏色主題\n     - 全局動畫效果\n     - 全局工具類別\n\n     注意：其他樣式已整合至 common.css 中，避免重複定義\n     ============================================================================== */\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=03f11d4c\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=03f11d4c&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  /**\n   * 🏠 HomeView.vue - 主頁面組件 (Main Page Component)\n   *\n   * 這是應用程式的主頁面，整合了地圖顯示和控制面板。\n   * 主要功能：\n   * - 顯示世界城市地圖\n   * - 提供城市導航按鈕\n   * - 提供底圖切換功能\n   * - 響應式佈局設計\n   *\n   * 組件結構：\n   * - MapTab: 地圖顯示組件\n   * - 控制面板: 城市導航和底圖選擇\n   */\n\n  import MapTab from '../tabs/MapTab.vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n  import { useDefineStore } from '@/stores/defineStore.js';\n  import { ref, onMounted, computed } from 'vue';\n\n  export default {\n    name: 'HomeView',\n    components: { MapTab },\n    setup() {\n      // 📦 存儲實例\n      const dataStore = useDataStore();\n      const defineStore = useDefineStore();\n\n      /**\n       * 🗺️ 設定地圖實例\n       * 將 Leaflet 地圖實例傳遞給 dataStore 以便城市導航使用\n       * @param {Object} map - Leaflet 地圖實例\n       */\n      const setMapInstance = (map) => dataStore.setMapInstance(map);\n\n      /**\n       * 🌍 導航到指定城市\n       * 將地圖視圖移動到選定城市的中心位置\n       * @param {string} cityId - 城市 ID\n       */\n      const navigateToCity = (cityId) => {\n        // 更新當前城市名稱\n        const city = cities.value?.find((c) => c.layerId === cityId);\n        if (city) {\n          console.log('🌍 切換到城市:', city.layerName);\n          currentCity.value = city.layerName;\n        }\n        dataStore.navigateToCity(cityId);\n      };\n\n      // 📊 獲取城市列表\n      const cities = computed(() => dataStore.layers[0].groupLayers);\n\n      // 🌍 當前選中的城市（預設為西安）\n      const currentCity = ref(\"XI'AN\");\n\n      // 🚀 初始化應用程式\n      onMounted(() => {\n        // 直接導航到西安\n        navigateToCity('Xian');\n      });\n\n      return {\n        setMapInstance,\n        navigateToCity,\n        cities,\n        defineStore,\n        currentCity,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🏠 主應用程式容器 -->\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <!-- 🗺️ 地圖區域容器 -->\n    <div class=\"flex-grow-1 overflow-hidden position-relative\">\n      <!-- 🗺️ 地圖組件 -->\n      <MapTab @map-ready=\"setMapInstance\" :current-city=\"currentCity\" />\n\n      <!-- 🎛️ 左側中間控制面板 -->\n      <div\n        class=\"position-absolute\"\n        style=\"top: 50%; left: 0; transform: translateY(-50%); z-index: 1000; padding: 1rem\"\n      >\n        <div class=\"bg-dark bg-opacity-75 rounded-3 p-3\">\n          <!-- 🌍 城市導航區域 -->\n          <div class=\"mb-3\">\n            <div class=\"d-flex flex-column gap-1\">\n              <button\n                v-for=\"city in cities\"\n                :key=\"city.layerId\"\n                class=\"btn border-0 my-city-btn my-font-sm-white px-4 py-3\"\n                :class=\"[currentCity === city.layerName ? 'active' : '']\"\n                @click=\"navigateToCity(city.layerId)\"\n              >\n                {{ city.layerName }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style>\n  @import '../assets/css/common.css';\n</style>\n","<script>\n  /**\n   * 🗺️ MapTab.vue - 簡化版地圖組件 (Simplified Map Component)\n   *\n   * 這是一個簡化的地圖組件，專為世界城市地圖展示設計。\n   * 主要功能：\n   * - 顯示世界六大城市的 GeoJSON 數據\n   * - 提供城市導航功能\n   * - 支援多種底圖切換\n   * - 響應式設計\n   *\n   * 技術架構：\n   * - Vue 3 Composition API\n   * - Leaflet 地圖庫\n   * - Pinia 狀態管理\n   * - Bootstrap 5 樣式\n   */\n\n  import { ref, onMounted, onUnmounted, watch, nextTick, computed } from 'vue';\n  import L from 'leaflet';\n  import 'leaflet/dist/leaflet.css';\n  import { useDataStore } from '@/stores/dataStore.js';\n  import { useDefineStore } from '@/stores/defineStore.js';\n\n  export default {\n    name: 'MapTab',\n    props: {\n      currentCity: { type: String, default: '城市名稱' },\n    },\n    emits: ['map-ready'],\n    setup(props, { emit }) {\n      // 📦 存儲實例\n      const dataStore = useDataStore();\n      const defineStore = useDefineStore();\n\n      // 🗺️ 地圖相關變數\n      const mapContainer = ref(null);\n      let mapInstance = null;\n      let currentTileLayer = null;\n      let layerGroups = {};\n\n      // 🎛️ 地圖控制狀態\n      const isMapReady = ref(false);\n      const mapContainerId = ref(`leaflet-map-${Math.random().toString(36).substr(2, 9)}`);\n\n      // 🏙️ 當前城市信息\n      const currentCityInfo = computed(() => {\n        if (!props.currentCity) {\n          return null;\n        }\n\n        // 從dataStore中獲取城市信息\n        const allLayers = dataStore.getAllLayers();\n        const cityLayer = allLayers.find((layer) => layer.layerName === props.currentCity);\n        if (cityLayer) {\n          return {};\n        } else {\n          return null;\n        }\n      });\n\n      /**\n       * 🏗️ 創建地圖實例\n       * 初始化 Leaflet 地圖並設定基本配置\n       */\n      const createMap = () => {\n        if (!mapContainer.value) return false;\n\n        const rect = mapContainer.value.getBoundingClientRect();\n        if (rect.width === 0 || rect.height === 0) {\n          return false;\n        }\n\n        try {\n          mapInstance = L.map(mapContainer.value, {\n            center: defineStore.mapView.center,\n            zoom: defineStore.mapView.zoom,\n            zoomControl: false,\n            attributionControl: false,\n            dragging: false, // 禁用拖拽\n            touchZoom: false, // 禁用觸控縮放\n            doubleClickZoom: false, // 禁用雙擊縮放\n            scrollWheelZoom: false, // 禁用滾輪縮放\n            boxZoom: false, // 禁用框選縮放\n            keyboard: false, // 禁用鍵盤控制\n          });\n\n          // 綁定地圖事件\n          mapInstance.on('zoomend', handleZoomEnd);\n          mapInstance.on('moveend', handleMoveEnd);\n\n          // 點擊空白處清除選取\n          mapInstance.on('click', function (e) {\n            if (!e.originalEvent.target.closest('.leaflet-interactive')) {\n              dataStore.setSelectedFeature(null);\n            }\n          });\n\n          // 設定 popup 面板的 z-index\n          mapInstance.getPane('popupPane').style.zIndex = 2200;\n\n          isMapReady.value = true;\n          emit('map-ready', mapInstance);\n\n          return true;\n        } catch (error) {\n          return false;\n        }\n      };\n\n      /**\n       * 📡 處理縮放結束事件\n       * 更新地圖視圖狀態到存儲中\n       */\n      const handleZoomEnd = () => {\n        if (mapInstance) {\n          const zoom = mapInstance.getZoom();\n          const center = mapInstance.getCenter();\n          defineStore.setMapView([center.lat, center.lng], zoom);\n          emit('update:zoomLevel', zoom);\n        }\n      };\n\n      /**\n       * 📡 處理移動結束事件\n       * 更新地圖中心座標\n       */\n      const handleMoveEnd = () => {\n        if (mapInstance) {\n          const center = mapInstance.getCenter();\n          defineStore.setMapView([center.lat, center.lng], mapInstance.getZoom());\n          emit('update:currentCoords', { lat: center.lat, lng: center.lng });\n        }\n      };\n\n      /**\n       * 🎨 設定 Google Maps 衛星圖底圖\n       * 固定使用 Google Maps 衛星圖作為底圖\n       */\n      const setBasemap = () => {\n        if (!mapInstance) return;\n\n        // 移除現有底圖\n        if (currentTileLayer) {\n          mapInstance.removeLayer(currentTileLayer);\n        }\n\n        // 添加 Google Maps 衛星圖圖層\n        const config = defineStore.googleSatelliteConfig;\n        currentTileLayer = L.tileLayer(config.url, {\n          attribution: config.attribution,\n          maxZoom: config.maxZoom,\n          subdomains: config.subdomains,\n          detectRetina: config.detectRetina,\n        });\n        mapInstance.addLayer(currentTileLayer);\n\n        // 設定容器背景為透明，讓衛星圖顯示\n        const mapContainerElement = mapContainer.value;\n        const mapRootElement = mapContainerElement ? mapContainerElement.parentElement : null;\n        if (mapContainerElement) {\n          const allBgClasses = ['my-map-bg-blank', 'my-map-bg-black', 'my-map-bg-transparent'];\n\n          // 移除所有背景顏色類別\n          [mapContainerElement, mapRootElement].forEach((el) => {\n            if (!el) return;\n            el.classList.remove(...allBgClasses);\n          });\n\n          // 設定透明背景\n          [mapContainerElement, mapRootElement].forEach((el) => {\n            if (!el) return;\n            el.classList.add('my-map-bg-transparent');\n          });\n        }\n      };\n\n      /**\n       * 🎨 創建要素圖層\n       * 不渲染任何視覺元素，僅用於數據管理\n       */\n      const createFeatureLayer = () => {\n        // 返回空圖層組，不顯示任何視覺元素\n        return L.layerGroup([]);\n      };\n\n      /**\n       * 🔄 同步圖層\n       * 根據存儲中的圖層狀態同步地圖上的圖層\n       */\n      const syncLayers = () => {\n        if (!mapInstance) return;\n\n        const allLayers = dataStore.getAllLayers();\n\n        allLayers.forEach((layer) => {\n          const layerId = layer.layerId;\n\n          if (layer.coordinates && layer.coordinates.length >= 2) {\n            // 顯示圖層\n            if (!layerGroups[layerId]) {\n              const geoJsonLayer = createFeatureLayer(layer);\n              if (geoJsonLayer) {\n                layerGroups[layerId] = geoJsonLayer;\n                mapInstance.addLayer(geoJsonLayer);\n              }\n            }\n          } else {\n            // 隱藏圖層\n            if (layerGroups[layerId]) {\n              mapInstance.removeLayer(layerGroups[layerId]);\n              delete layerGroups[layerId];\n            }\n          }\n        });\n      };\n\n      /**\n       * 📏 刷新地圖尺寸\n       * 當容器大小改變時重新計算地圖尺寸\n       */\n      const invalidateSize = () => {\n        if (mapInstance) {\n          setTimeout(() => {\n            mapInstance.invalidateSize();\n          }, 100);\n        }\n      };\n\n      /**\n       * 🚀 初始化地圖\n       * 創建地圖並載入初始數據\n       */\n      const initMap = () => {\n        let attempts = 0;\n        const maxAttempts = 20;\n\n        const tryCreateMap = () => {\n          if (attempts >= maxAttempts) {\n            return;\n          }\n\n          attempts++;\n\n          if (createMap()) {\n            setBasemap();\n            syncLayers();\n\n            // 預設顯示西安的街道線條\n            setTimeout(() => {\n              const xianLayer = dataStore.findLayerById('Xian');\n              if (xianLayer && xianLayer.coordinates) {\n                const geoJsonLayer = createFeatureLayer(xianLayer);\n                if (geoJsonLayer) {\n                  layerGroups['Xian'] = geoJsonLayer;\n                  mapInstance.addLayer(geoJsonLayer);\n                }\n              }\n            }, 500);\n          } else {\n            setTimeout(tryCreateMap, 100);\n          }\n        };\n\n        tryCreateMap();\n      };\n\n      // 📏 設置 ResizeObserver 監聽容器大小變化\n      let resizeObserver = null;\n      let resizeTimeout = null;\n\n      const setupResizeObserver = () => {\n        if (!mapContainer.value || !window.ResizeObserver) return;\n\n        resizeObserver = new ResizeObserver(() => {\n          if (resizeTimeout) {\n            clearTimeout(resizeTimeout);\n          }\n\n          resizeTimeout = setTimeout(() => {\n            invalidateSize();\n          }, 200);\n        });\n\n        resizeObserver.observe(mapContainer.value);\n      };\n\n      // 🧹 生命週期：組件掛載\n      onMounted(() => {\n        nextTick(() => {\n          initMap();\n          setupResizeObserver();\n        });\n      });\n\n      // 🧹 生命週期：組件卸載\n      onUnmounted(() => {\n        if (resizeTimeout) {\n          clearTimeout(resizeTimeout);\n        }\n\n        if (resizeObserver) {\n          resizeObserver.disconnect();\n        }\n\n        if (mapInstance) {\n          mapInstance.remove();\n          mapInstance = null;\n        }\n\n        layerGroups = {};\n        currentTileLayer = null;\n        isMapReady.value = false;\n      });\n\n      // 👀 監聽器：監聽資料存儲中的圖層變化\n      watch(() => dataStore.layers, syncLayers, { deep: true });\n\n      // 📤 返回組件公開的屬性和方法\n      return {\n        mapContainer,\n        mapContainerId,\n        currentCityInfo,\n        invalidateSize,\n        defineStore,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🗺️ 地圖主容器 -->\n  <div id=\"map-container\" class=\"h-100 w-100 position-relative bg-transparent z-0\">\n    <!-- 🗺️ Leaflet 地圖容器 -->\n    <div :id=\"mapContainerId\" ref=\"mapContainer\" class=\"h-100 w-100\"></div>\n  </div>\n</template>\n\n<style>\n  @import '../assets/css/common.css';\n</style>\n","/**\n * 📦 數據存儲模組 (Data Store Module)\n *\n * 管理城市圖層數據和地圖導航功能\n * 使用 Pinia 狀態管理系統和 Vue 3 Composition API\n */\n\n// 核心依賴\nimport { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\n\n/**\n * 🏪 數據存儲商店定義 (Data Store Definition)\n *\n * 使用 Pinia 的 defineStore 創建一個名為 'data' 的狀態管理商店。\n * 採用 Composition API 語法，提供更好的 TypeScript 支援和代碼組織。\n *\n * @returns {Object} 包含所有狀態和方法的商店對象\n */\nexport const useDataStore = defineStore(\n  'data', // 商店唯一標識符\n  () => {\n    /**\n     * 🗺️ 圖層配置數據 (Layer Configuration Data)\n     *\n     * 定義所有可用的地圖圖層，採用分組結構組織，每個圖層包含完整的配置信息。\n     * 使用 ref 創建響應式數據，當圖層狀態改變時會自動更新相關 UI 組件。\n     *\n     * 📋 圖層結構說明：\n     * - groupName: 圖層組名稱，用於 UI 分組顯示\n     * - groupLayers: 該組下的所有圖層列表\n     *   - layerId: 圖層唯一標識符\n     *   - layerName: 圖層顯示名稱\n     *   - zoom: 縮放級別\n     *   - coordinates: 街道線條的兩個端點座標 [起點, 終點]\n     */\n    const layers = ref([\n      {\n        // 🌍 世界城市地圖集合\n        // 包含各大洲代表性城市的地理邊界數據\n        groupName: '世界城市',\n        groupLayers: [\n          {\n            // 🏛️ 西安圖層配置\n            layerId: 'Xian', // 圖層唯一標識符\n            layerName: \"XI'AN\", // 圖層顯示名稱\n            zoom: 12, // 最佳縮放級別\n            coordinates: [\n              [108.94187642402278, 34.192881967113934],\n              [108.94258912558922, 34.34966320467116],\n            ],\n          },\n          {\n            // 🏛️ 北京圖層配置\n            layerId: 'Beijing', // 圖層唯一標識符\n            layerName: 'BEIJING', // 圖層顯示名稱\n            zoom: 11, // 最佳縮放級別\n            coordinates: [\n              [116.39637957256002, 39.80351256231435],\n              [116.38618671648146, 40.012091717672405],\n            ],\n          },\n          {\n            // 🏛️ 羅馬圖層配置\n            layerId: 'Rome', // 圖層唯一標識符\n            layerName: 'ROME', // 圖層顯示名稱\n            zoom: 14, // 最佳縮放級別\n            coordinates: [\n              [12.467227004214806, 41.93300140114903],\n              [12.483219652625365, 41.89425990038757],\n            ],\n          },\n          {\n            // 🏛️ 巴黎圖層配置\n            layerId: 'Paris', // 圖層唯一標識符\n            layerName: 'PARIS', // 圖層顯示名稱\n            zoom: 13, // 最佳縮放級別\n            coordinates: [\n              [2.33334539087744, 48.86160021235486],\n              [2.2188966642140713, 48.89782995675384],\n            ],\n          },\n          {\n            // 🏛️ 華盛頓圖層配置\n            layerId: 'Washington', // 圖層唯一標識符\n            layerName: 'WASHINGTON', // 圖層顯示名稱\n            zoom: 13, // 最佳縮放級別\n            coordinates: [\n              [-77.05013839452597, 38.88929463507836],\n              [-76.9133749343309, 38.88976503523864],\n            ],\n          },\n          {\n            // 🏛️ 柏林圖層配置\n            layerId: 'Berlin', // 圖層唯一標識符\n            layerName: 'BERLIN', // 圖層顯示名稱\n            zoom: 13, // 最佳縮放級別\n            coordinates: [\n              [13.229711365656641, 52.50673639566284],\n              [13.399053707740194, 52.51765971170866],\n            ],\n          },\n        ],\n      },\n    ]);\n\n    /**\n     * 🔍 根據圖層 ID 查找圖層對象 (Find Layer by ID)\n     *\n     * 在分組結構的圖層配置中搜索指定 ID 的圖層，返回完整的圖層配置對象。\n     * 使用嵌套循環遍歷所有圖層組和圖層，確保能夠找到正確的圖層。\n     *\n     * @param {string} layerId - 要查找的圖層唯一標識符\n     * @returns {Object|null} 找到的圖層對象，如果未找到則返回 null\n     *\n     * @example\n     * const layer = findLayerById('安養機構');\n     * if (layer) {\n     *   console.log('找到圖層:', layer.layerName);\n     * }\n     */\n    const findLayerById = (layerId) => {\n      // 遍歷所有圖層組\n      for (const group of layers.value) {\n        // 遍歷當前組的所有圖層\n        for (const layer of group.groupLayers) {\n          // 檢查圖層 ID 是否匹配\n          if (layer.layerId === layerId) {\n            return layer; // 返回找到的圖層對象\n          }\n        }\n      }\n      return null; // 未找到指定 ID 的圖層\n    };\n\n    /**\n     * 📋 獲取所有圖層的扁平陣列 (Get All Layers as Flat Array)\n     *\n     * 將分組結構的圖層配置轉換為扁平的一維陣列，便於進行批量操作和遍歷。\n     * 使用展開運算符將每個圖層組的所有圖層合併到一個陣列中。\n     *\n     * @returns {Array} 包含所有圖層的扁平陣列\n     *\n     * @example\n     * const allLayers = getAllLayers();\n     * console.log('總共有', allLayers.length, '個圖層');\n     */\n    const getAllLayers = () => {\n      const allLayers = []; // 初始化結果陣列\n      // 遍歷所有圖層組\n      for (const group of layers.value) {\n        // 使用展開運算符將當前組的所有圖層添加到結果陣列\n        allLayers.push(...group.groupLayers);\n      }\n      return allLayers; // 返回扁平化的圖層陣列\n    };\n\n    /**\n     * 🔄 切換圖層可見性狀態 (Toggle Layer Visibility)\n     *\n     * 控制指定圖層的顯示/隱藏狀態，並在圖層首次顯示時自動載入相關數據。\n     * 這是圖層管理的核心方法，負責處理圖層狀態變更和數據載入邏輯。\n     *\n     * @param {string} layerId - 要切換狀態的圖層唯一標識符\n     * @returns {Promise<void>} 異步操作，無返回值\n     *\n     * @example\n     * // 切換安養機構圖層的顯示狀態\n     * await toggleLayerVisibility('安養機構');\n     */\n    // 移除圖層可見性切換（城市圖層永久可見，且無需勾選切換）\n\n    // ------------------------------------------------------------\n    // 選中的地圖物件（用於清除選取狀態）\n    const selectedFeature = ref(null);\n\n    const setSelectedFeature = (feature) => {\n      selectedFeature.value = feature;\n    };\n\n    // ------------------------------------------------------------\n    // 地圖導航功能\n    const mapInstance = ref(null);\n\n    const setMapInstance = (map) => {\n      mapInstance.value = map;\n    };\n\n    /**\n     * 🌍 導航到指定城市\n     *\n     * 將地圖視圖移動到指定城市的中心位置，並根據當前底圖模式\n     * 自動切換到對應的顏色主題（如果適用）\n     *\n     * @param {string} cityId - 城市圖層的唯一標識符\n     * @returns {void}\n     */\n    const navigateToCity = (cityId) => {\n      // 查找城市圖層\n      const cityLayer = findLayerById(cityId);\n      if (!cityLayer) {\n        return;\n      }\n\n      // 檢查地圖實例是否準備就緒\n      if (!mapInstance.value) {\n        // 延遲重試機制\n        setTimeout(() => {\n          if (mapInstance.value) {\n            navigateToCity(cityId);\n          }\n        }, 1000);\n        return;\n      }\n\n      // 從座標數據計算街道線條中心點\n      let targetCenter = null;\n      const optimalZoom = cityLayer.zoom || 11;\n\n      if (cityLayer.coordinates && cityLayer.coordinates.length >= 2) {\n        // 計算兩點連線的中間點\n        const [lng1, lat1] = cityLayer.coordinates[0];\n        const [lng2, lat2] = cityLayer.coordinates[1];\n        const centerLng = (lng1 + lng2) / 2;\n        const centerLat = (lat1 + lat2) / 2;\n        targetCenter = [centerLat, centerLng]; // Leaflet 需要 [lat, lng] 格式\n      }\n\n      if (!targetCenter) {\n        return;\n      }\n\n      // 執行地圖導航\n      try {\n        mapInstance.value.setView(targetCenter, optimalZoom, { animate: false });\n      } catch (error) {\n        // 地圖導航失敗，靜默處理\n      }\n    };\n\n    return {\n      layers,\n      findLayerById, // 根據 ID 尋找圖層\n      getAllLayers, // 獲取所有圖層的扁平陣列\n      selectedFeature, // 選中的地圖要素\n      setSelectedFeature, // 設定選中的地圖要素\n      mapInstance, // 地圖實例\n      setMapInstance, // 設定地圖實例\n      navigateToCity, // 導航到指定城市\n      // 所有圖層都是可見的，所以直接返回所有圖層\n      visibleLayers: computed(() => getAllLayers()),\n    };\n  },\n  {\n    persist: true,\n  }\n);\n","/**\n * 🗺️ 定義存儲模組 (Define Store Module)\n *\n * 管理應用程式的全局配置和設定，包括底圖選擇和地圖視圖狀態。\n * 主要功能：\n * - 管理底圖配置和選擇\n * - 保存地圖視圖狀態（中心點、縮放級別）\n * - 提供底圖切換功能\n *\n * 技術架構：\n * - Pinia 狀態管理\n * - 響應式狀態更新\n * - 模組化配置管理\n */\n\nimport { defineStore } from 'pinia';\n\nexport const useDefineStore = defineStore('define', {\n  state: () => ({\n    // 🗺️ 地圖視圖狀態\n    mapView: {\n      center: [34.271271085914, 108.942232774512], // 地圖中心點 [緯度, 經度] - 西安街道線條中心點\n      zoom: 12, // 縮放等級（與西安定義一致）\n    },\n    // 🗺️ Google Maps 衛星圖配置（固定使用）\n    googleSatelliteConfig: {\n      url: 'https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n      attribution: '© Google',\n      maxZoom: 20,\n      subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n      detectRetina: true,\n    },\n  }),\n  actions: {\n    /**\n     * 🗺️ 設定地圖視圖狀態\n     * @param {Array} center - 地圖中心點 [緯度, 經度]\n     * @param {number} zoom - 縮放級別\n     */\n    setMapView(center, zoom) {\n      this.mapView.center = center;\n      this.mapView.zoom = zoom;\n    },\n  },\n});\n","import { render } from \"./MapTab.vue?vue&type=template&id=ed2204b4\"\nimport script from \"./MapTab.vue?vue&type=script&lang=js\"\nexport * from \"./MapTab.vue?vue&type=script&lang=js\"\n\nimport \"./MapTab.vue?vue&type=style&index=0&id=ed2204b4&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./HomeView.vue?vue&type=template&id=0633f454\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js\"\n\nimport \"./HomeView.vue?vue&type=style&index=0&id=0633f454&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * 🚀 Vue Router 路由配置\n *\n * 長照空間分析系統的路由管理\n * 使用 Vue Router 4 進行單頁應用程式路由控制\n *\n * @author 長照空間分析團隊\n * @version 1.0.0\n */\n\nimport { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\n\n/**\n * 📍 路由配置陣列\n * 定義應用程式的所有路由規則\n */\nconst routes = [\n  {\n    path: '/', // 🏠 根路徑\n    name: 'Home', // 路由名稱\n    component: HomeView, // 對應的 Vue 組件\n  },\n];\n\n/**\n * 🛣️ 路由器實例創建\n *\n * 配置說明：\n * - history: 使用 HTML5 History API 模式\n * - base: 設定應用程式的基礎路徑為 '/30DayMapChallenge-02_Lines/'\n * - routes: 路由配置陣列\n */\nconst router = createRouter({\n  history: createWebHistory('/30DayMapChallenge-02_Lines/'),\n  routes,\n});\n\nexport default router;\n","/**\n * 🚀 應用程式主入口文件 (Main Application Entry Point)\n *\n * 本文件是整個 Vue.js 應用程式的啟動入口，負責初始化所有核心系統和第三方依賴。\n * 採用模組化設計，確保各系統間的依賴關係清晰明確。\n *\n * 📋 主要功能模組：\n * 1. 🎨 樣式系統初始化 - Bootstrap 5 + 自定義主題 + 第三方 UI 庫樣式\n * 2. 🧩 Vue 3 應用程式核心 - 使用 Composition API 的現代化 Vue 架構\n * 3. 🗺️ 路由系統配置 - Vue Router 4 單頁應用程式導航管理\n * 4. 📦 狀態管理系統 - Pinia 全域狀態管理和數據持久化\n * 5. 🌍 DOM 掛載與渲染 - 將應用程式掛載到 HTML 容器中\n * 6. 🔧 第三方庫整合 - Leaflet 地圖、Font Awesome 圖示、Bootstrap 組件\n *\n * 🏗️ 技術架構：\n * - Vue 3.3+ (Composition API + <script setup> 語法)\n * - Vue Router 4 (聲明式路由配置)\n * - Pinia 2+ (輕量級狀態管理，替代 Vuex)\n * - Bootstrap 5.3+ (響應式 UI 框架)\n * - Leaflet 1.9+ (開源地圖庫)\n * - Font Awesome 6+ (向量圖示庫)\n *\n * 🔄 初始化流程：\n * 1. 載入所有必要的樣式和 JavaScript 依賴\n * 2. 創建 Vue 應用程式實例\n * 3. 配置並註冊路由系統\n * 4. 配置並註冊狀態管理系統\n * 5. 將應用程式掛載到 DOM 元素\n * 6. 輸出初始化完成日誌\n *\n * 📁 相關文件：\n * - ./App.vue - 根組件\n * - ./router/index.js - 路由配置\n * - ./stores/ - Pinia 狀態管理模組\n * - ./assets/css/ - 自定義樣式文件\n */\n\n// 🔧 Vue 核心模組引入 (Vue Core Module Imports)\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\n\n// 🧩 應用程式組件引入 (Application Component Imports)\nimport App from './App.vue';\nimport router from './router';\n\n// 🎨 引入第三方樣式文件 (Import Third-Party Style Files)\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap 5 CSS 框架\nimport 'leaflet/dist/leaflet.css'; // Leaflet 地圖核心樣式\nimport '@fortawesome/fontawesome-free/css/all.min.css'; // Font Awesome 圖示庫\n\n// 🎨 引入自定義樣式文件 (Import Custom Style Files)\nimport './assets/css/common.css'; // 共用樣式（已包含變數和主題配置）\n\n// ⚙️ 引入第三方 JavaScript 文件 (Import Third-Party JavaScript Files)\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js'; // Bootstrap JS（含 Popper.js）\n// 提供下拉選單、模態框、工具提示等互動功能\n\n// 🐛 調試資訊輸出 (Debug Information Output)\nconsole.log('🎨 樣式文件載入完成');\n\n// 🚀 創建並配置 Vue 應用程式實例 (Create and Configure Vue Application Instance)\nconst app = createApp(App);\n\n// 📦 創建 Pinia 狀態管理實例 (Create Pinia State Management Instance)\nconst pinia = createPinia();\n\n// 🗺️ 註冊 Vue Router 路由系統 (Register Vue Router Navigation System)\napp.use(router);\n\n// 📦 註冊 Pinia 狀態管理系統 (Register Pinia State Management System)\napp.use(pinia);\n\n// 🌍 掛載應用程式到 DOM 元素 (Mount Application to DOM Element)\n// 將 Vue 應用程式掛載到 index.html 中 id=\"app\" 的元素上\napp.mount('#app');\n\n// 🐛 應用程式啟動完成的調試資訊 (Application Startup Debug Information)\nconsole.log('🚀 空間分析視覺化平台已啟動');\nconsole.log('📦 Pinia 狀態管理已初始化');\nconsole.log('🗺️ Vue Router 路由系統已就緒');\nconsole.log('🎨 Bootstrap 5 UI 框架已載入');\nconsole.log('🗺️ Leaflet 地圖庫已準備就緒');\nconsole.log('🔤 Font Awesome 圖示庫已載入');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_30DayMapChallenge_02_Lines\"] = self[\"webpackChunk_30DayMapChallenge_02_Lines\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(7061); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_router_view","name","components","setup","__exports__","render","style","_component_MapTab","onMapReady","$setup","setMapInstance","currentCity","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_Fragment","_renderList","cities","city","key","layerId","_normalizeClass","layerName","onClick","$event","navigateToCity","_hoisted_7","mapContainerId","ref","useDataStore","defineStore","layers","groupName","groupLayers","zoom","coordinates","findLayerById","group","value","layer","getAllLayers","allLayers","push","selectedFeature","setSelectedFeature","feature","mapInstance","map","cityId","cityLayer","setTimeout","targetCenter","optimalZoom","length","lng1","lat1","lng2","lat2","centerLng","centerLat","setView","animate","error","visibleLayers","computed","persist","useDefineStore","state","mapView","center","googleSatelliteConfig","url","attribution","maxZoom","subdomains","detectRetina","actions","setMapView","this","props","type","String","default","emits","emit","dataStore","mapContainer","currentTileLayer","layerGroups","isMapReady","Math","random","toString","substr","currentCityInfo","find","createMap","rect","getBoundingClientRect","width","height","L","zoomControl","attributionControl","dragging","touchZoom","doubleClickZoom","scrollWheelZoom","boxZoom","keyboard","on","handleZoomEnd","handleMoveEnd","e","originalEvent","target","closest","getPane","zIndex","getZoom","getCenter","lat","lng","setBasemap","removeLayer","config","addLayer","mapContainerElement","mapRootElement","parentElement","allBgClasses","forEach","el","classList","remove","add","createFeatureLayer","syncLayers","geoJsonLayer","invalidateSize","initMap","attempts","maxAttempts","tryCreateMap","xianLayer","resizeObserver","resizeTimeout","setupResizeObserver","window","ResizeObserver","clearTimeout","observe","onMounted","nextTick","onUnmounted","disconnect","watch","deep","MapTab","c","console","log","routes","path","component","HomeView","router","createRouter","history","createWebHistory","app","createApp","App","pinia","createPinia","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}